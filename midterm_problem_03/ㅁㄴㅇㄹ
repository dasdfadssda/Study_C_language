Console.c 코드
/*
	Console.c: console-related functions
		This file is for Windows
*/



#include <stdio.h>
#include <stdlib.h>


#ifdef _WINDOWS
// for windows

#include <windows.h>

#include "Console.h"

void clrscr(void)		// clear the screen
{
	COORD Cur= {0, 0};
	unsigned long dwLen = 0;

	int width = getWindowWidth();
	int height = getWindowHeight();
	int size = width * height;

	gotoxy(1, 1);
	FillConsoleOutputCharacter(GetStdHandle(STD_OUTPUT_HANDLE), ' ', size, Cur, &dwLen);
	gotoxy(1, 1);
}

void gotoxy(int x, int y)	// move cursor to (x, y)
{
	COORD Pos = { (short)(x - 1), (short)(y - 1)};

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

int getWindowWidth()
{
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &csbi);

    return (int)(csbi.srWindow.Right - csbi.srWindow.Left + 1);
}

int getWindowHeight()
{
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &csbi);

    return (int)(csbi.srWindow.Bottom - csbi.srWindow.Top + 1);
}

void EnableCursor(int enable)
{
    CONSOLE_CURSOR_INFO cursorInfo = { 0, };
    cursorInfo.dwSize = 1;
    cursorInfo.bVisible = enable;
    SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

void MySleep(int msec)
{
	Sleep(msec);
}

void MyPause()
{
	system("PAUSE");
}

#endif	// _WINDOWS


#if defined(_LINUX) || defined(_MAC)
// for Mac or Linux

#include <sys/ioctl.h>
#include <unistd.h>
#include <termios.h>
#include <fcntl.h>

#include "Console.h"

void gotoxy(int x,int y)
{
    printf("%c[%d;%df",0x1B,y,x);
}

void clrscr()
{
	fprintf(stdout, "\033[2J\033[0;0f");
	fflush(stdout);
}

int getWindowWidth()
{
	struct winsize w;
    ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);

	return w.ws_col;
}

int getWindowHeight()
{
	struct winsize w;
    ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);

	return w.ws_row;
}

int getch()
{
	int c = 0;
	struct termios oldattr, newattr;

	tcgetattr(STDIN_FILENO, &oldattr);
	newattr = oldattr;
	newattr.c_lflag &= ~(ICANON | ECHO);
	newattr.c_cc[VMIN] = 1;
	newattr.c_cc[VTIME] = 0;
	tcsetattr(STDIN_FILENO, TCSANOW, &newattr);
	c = getchar();
	tcsetattr(STDIN_FILENO, TCSANOW, &oldattr);


	return c;
}

int kbhit(void)
{
  struct termios oldt, newt;
  int ch = 0;
  int oldf = 0;

  tcgetattr(STDIN_FILENO, &oldt);
  newt = oldt;
  newt.c_lflag &= ~(ICANON | ECHO);
  tcsetattr(STDIN_FILENO, TCSANOW, &newt);
  oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
  fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

  ch = getch();

  tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
  fcntl(STDIN_FILENO, F_SETFL, oldf);

  if(ch != EOF){
    ungetc(ch, stdin);
    return 1;
  }

  return 0;
}

void EnableCursor(int enable)
{
	if(enable){
		printf("\e[?25h");
		fflush(stdout) ;
	} else {
		printf("\e[?25l");
		fflush(stdout);
	}
}

void MySleep(int msec)
{
    usleep(msec * 1000);
}

void MyPause()
{
	printf("Press Enter to continue...");
	getchar();
}

#endif 	// defined(_LINUX) || defined(_MAC)


void DrawLine(int x1, int y1, int x2, int y2, char c)
{
	int dx = 0, dy = 0;
	int x = 0, y = 0;

	if(abs(x2 - x1) > abs(y2 - y1)){
		if(x1 > x2){
			swap(&x1, &x2);
			swap(&y1, &y2);
		}
	} else if(y1 > y2){
		swap(&x1, &x2);
		swap(&y1, &y2);
	}

	dx = x2 - x1;
	dy = y2 - y1;

	if(dx >= dy){
		if(dx == 0){
			gotoxy(x1, y1);
			printf("%c", c);
		} else {
			for(x = x1; x <= x2; x++){
				y = (y1 * (x2 - x) + y2 * (x - x1) + dx / 2) / dx;
				gotoxy(x, y);
				printf("%c", c);
			}
		}
	} else {
		for(y = y1; y <= y2; y++){
			x = (x1 * (y2 - y) + x2 * (y - y1) + dy / 2) / dy;
			gotoxy(x, y);
			printf("%c", c);
		}
	}
}

void swap(int *pa, int *pb)
{
	int temp = *pa;
	*pa = *pb;
	*pb = temp;
}


Console.h코드
/*
	Console.h: declarations for console-related functions
*/

#ifndef	__CONSOL__
#define	__CONSOL__

#ifdef	_WINDOWS
	#include <windows.h>
	#include <conio.h>
#endif	//	_WINDOWS

void clrscr(void);              // clear screen
void gotoxy(int x, int y);     // move cursor to (x, y) coordinate

int getWindowWidth();       // get width of current console window
int getWindowHeight();      // get height of current console window

void DrawLine(int x1, int y1, int x2, int y2, char c);
void swap(int *pa, int *pb);

void EnableCursor(int enable);

void MySleep(int msec);		// wait for msec milliseconds
void MyPause();				// wait for the Enter key


#if defined(_LINUX) || defined(_MAC)

int kbhit();				// check if there is a key in the key buffer
int getch();				// read a key not waiting for the Enter key

#endif	// defined(_LINUX) || defined(_MAC)

#endif	//	__CONSOL__


mider.c코드
/*
    Extend your solution of hw3_3 to rotate the text in the center of the screen.                                                                                                                                                                                                                 
        See midterm_demo.mp4
        - DO NOT delete or modify the algorithms
        
    Complete the program by writing the following functions
        - int MoveStar(int x1, int y1, int x2, int y2, int delay, char mesg[], int len, int *idx, int sx, int sy);
            moves a star from (x1, y1) to (x2, y2), while rotating a string
            . mesg: the text to rotate
            . len: the length of mesg
            . *idx: the index in mesg from which the function starts to display
            . sx and sy: coordinate to display mesg
        - void PrintRotated(char str[], int idx, int len)
            . display a string from the specified index (idx).
              (e.g., for str = "hello", idx = 3, and len = 5, PrintRotated() should display "lohel" )

    Compilation:
        on Windows: gcc <source file> Console.c -D_WINDOWS
            * run in DOS Prompt 
        on MacOS:   gcc <source file> Console.c -D_MAC
            * run in a separate terminal 

    Run on a separate terminal.
        e.g., Dos Prompt on Windows, Terminal on Mac
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Console.h"

#define TRUE 1
#define FALSE 0

#define MIN(x, y) ((x) < (y) ? (x) : (y))
#define MAX(x, y) ((x) > (y) ? (x) : (y))
#define ABS(x)    ((x) >= 0 ? (x) : -(x))

int screen_width = 0;
int screen_height = 0;

int completed = TRUE;           // enable this line after completing MoveStar()
//int completed = FALSE;        // enable this line before completing MoveStar()

int MoveStar(int x1, int y1, int x2, int y2, int delay, char mesg[], int len, int *idx, int sx, int sy);
void PrintRotated(char str[], int idx, int len);

int main()                                                                                                                                                                                                              
{
    char mesg[256] = "You are the masterpiece of God! ";
    int len = strlen(mesg);

    screen_width = getWindowWidth();
    screen_height = getWindowHeight() - 3;

    clrscr();

    if(completed == FALSE){
        int idx = 0;
        MoveStar(screen_width / 2, 2, 1, screen_height / 2, 30, mesg, len, &idx, 1, 1);
        return 0;
    } else {
        gotoxy(1, screen_height);
        printf("Press ESC to quit.");

        // coordinates of the corners
        int x[5] = { screen_width / 4,  screen_width * 3 / 4, screen_width * 3 / 4,  screen_width / 4,      screen_width / 4};
        int y[5] = { screen_height / 4, screen_height / 4,    screen_height * 3 / 4, screen_height * 3 / 4, screen_height / 4};

        int sx = (screen_width - len) / 2;
        int sy = screen_height / 2;
        gotoxy(sx, sy);
        printf("%s", mesg);

        int idx = 0;
        for(int i = 0; 1; i = (i + 1) % 4){
            int ret = 0;
            if(i % 2 == 0)
                ret = MoveStar(x[i], y[i], x[i+1], y[i+1], 30, mesg, len, &idx, sx, sy);
            else
                ret = MoveStar(x[i], y[i], x[i+1], y[i+1], 60, mesg, len, &idx, sx, sy);

            if(ret == FALSE)
                break;
        }
    }

    gotoxy(1, screen_height + 1);
    printf("Bye!\n");

    return 0;
}

int MoveStar(int x1, int y1, int x2, int y2, int delay, char mesg[], int len, int *idx, int sx, int sy)                                                                                                                                                                                                                    
{
    int dx = ABS(x1 - x2);
    int dy = ABS(y1 - y2);
    int dist = MAX(dx, dy);

    int x = 0, y = 0;
    int prevx = x1, prevy = y1;

    // TO DO: implement this function to move a star ('*') from (x1, y1) to (x2, y2), rotating mesg at (sx, sy)
    //  repeat for t from 0 to dist
    //      save x and y in prevx and prevy
    //      compute x and y by linear interpolation
    //          x = ((dist - t) * x1 + t * x2) / dist
    //          y = ((dist - t) * y1 + t * y2) / dist 
    //      erase the previous star by displaying ' ' at the previous coordinate (prevx, prevy)
    //      draw '*' at the new coordinate (x, y)

    //      increase *idx
    //      if *idx is equal to len, set *idx to zero
    //      move cursor to (sx, sy)
    //      display mesg from *idx-th character by calling PrintRotated()

    //      insert the following two lines to break the loop on ESC
    //         if(kbhit() && getch() == 27)     // 27 is the ASCII code of ESC
    //            return FALSE;

    //      move the cursor to (1, screen_height)
    //      call "fflush(stdout);"
    //      wait for delay msec. (call "MySleep(delay);")


    gotoxy(x, y);
    putchar(' ');

    return TRUE;
}

void PrintRotated(char str[], int idx, int len)                                                                                                                                                                                                                 
{
    /*
        TO DO: display str in a circular way, starting from idx-th character
            for i from 0 to len
                display str[(idx + i) % len];

    */
}


